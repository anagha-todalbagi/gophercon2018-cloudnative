Cloud-native Go
Build a continuously-updated app using managed platforms and services.
27 Aug 2018
Tags: cloud, azure, services

Josh Gavant
Program Manager, Microsoft
joshgav@microsoft.com
@joshugav

Martin Strobel
Software Engineer, Microsoft
marstr@microsoft.com
@mkstrobel

* 1) Intro and overview

Your *presenters*

*Schedule*:
- 4 modules with exercises, each ~70m
- End exercises, including deploying an Athen proxy.
- Breaks and lunch

*Nearby*: bathrooms, lunch, wifi

*Tech*: An Azure account and Azure CLI

*Assistants*: who and where they are


* Overview: Cloud-native systems.

.image img/cloud-native-app.png 494 610

Managed compute, communication, services, and delivery.

: demo:
: `GOPROXY=proxy_addr GO111MODULE=on go1.11* get`
: show resources in Azure portal
: monitoring?
: discuss diagram and show each component


* What is "cloud-native"?

.image img/cloud-native.png 358 490

1. Compute runtimes
2. Communicating microservices
3. Managed platform and services
4. Continuous integration and delivery


* Exercises?


* 2) The Compute Spectrum

TODO(joshgav): <img>
Functions -> Apps -> Containers -> Pods -> Cluster Apps

: demos:
: create and run a Function
: update a codebase and app updates via ACR and WebApps
: deploy a multi-container app to AKS

: talking points:
: PaaS vs. Containers - value added by App Service et al
: Where do Functions best fit? Short-lived, event-driven, handle managed services.
: orchestrators and pods
: Event-driven architecture

* Get started quickly with Buffalo

* Exercises

- Deploy a function to a shared function host.
- Deploy a container to a registry and hosted web app.
- Buffalo?
- Deploy a pod to a shared Kubernetes cluster in AKS.


* 3) Communicating Between Services

* Communicating across thread boundaries

* Channels

- Thread safe queues
- Read/Write are blocking
- Optionally buffered
- Multiple producer/readers are acceptable

* Reading and Writing to Channels

.code ./presentation/channels_test.go /^func ExampleReadWriteBufferedChannel/,/^}/

- Must be buffered, or first write will never complete.

* Channels and Fibonacci

.code ./presentation/channels_test.go /^func ExampleBasicFibonacci/,/^}/

: This doesn't ever terminate, does anybody in the audience see the problem?

* Select

.code ./presentation/channels_test.go /^func ExampleSelectBlock/,/^}/

* Cancellable Fibonacci

.code ./presentation/channels_test.go /^func ExampleCancellableFibonacci/,/^}/

* Non-Blocking Channel Read

.code ./presentation/channels_test.go /^func ExampleDefaultClause/,/^}/

: `default` keyword unblocks a `select` when all channel operations were blocking.

: This trick only works when you're deciding whether or not a channel has been closed.

* context.Context

.code ./presentation/channels_test.go /START CONTEXT DEF/,/END CONTEXT DEF/

.code ./presentation/channels_test.go /type CancelFunc/,/\n/

.code ./presentation/channels_test.go /func WithCancel/,/{/

.code ./presentation/channels_test.go /func WithDeadline/,/{/

.code ./presentation/channels_test.go /func WithTimeout/,/{/

.code ./presentation/channels_test.go /func WithValue/,/{/

: Feature rich cancellation semantics
: Hierarchical cancellation propagation, timeout
: Property bag
: Good for Request-ID, and similar

* Fibonacci with Context

.code ./presentation/channels_test.go /func ExampleContextFibonacci/,/^}/

* Break for Cancellation exercises

Good luck!

* Dealing with High-Latency Blocking Calls

- Common to inject `context.Context` as first parameter:
.code ./exercises/cancellation/sudoku/board.go /^type Solver/,/error/


* 4) Managed Services

- Storage and Databases
- Authentication and Directory
- Messaging
- Code storage, build, test, and deploy


* Exercises

- Store and retrieve a blob.
- Set up a web app which logs in a user and says hello to them by name.


* 5. Final exercises

- Athens
